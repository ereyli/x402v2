# Quickstart for Sellers

This guide walks you through integrating with x402 to enable payments for your API or service. By the end, your API will be able to charge buyers and AI agents for access.

<Note>
  This quickstart begins with testnet configuration for safe testing. When you're ready for production, see [Running on Mainnet](#running-on-mainnet) for the simple changes needed to accept real payments.
</Note>

## Prerequisites

Before you begin, ensure you have:

* A crypto wallet to receive funds (any EVM-compatible wallet, e.g., [CDP Wallet](/server-wallets/v1/concepts/wallets))
* (Optional) A [Coinbase Developer Platform](https://cdp.coinbase.com) (CDP) account and API Keys
  * Required for mainnet use until other facilitators go live
* [Node.js](https://nodejs.org/en) and npm, or Python and pip installed
* An existing API or server

<Info>
  We have pre-configured examples available in our repo for both [Node.js](https://github.com/coinbase/x402/tree/main/examples/typescript/servers) and [Python](https://github.com/coinbase/x402/tree/main/examples/python/servers). We also have an [advanced example](https://github.com/coinbase/x402/tree/main/examples/typescript/servers/advanced) that shows how to use the x402 SDKs to build a more complex payment flow.
</Info>

## 1. Install Dependencies

<Tabs>
  <Tab title="Node.js">
    <Tabs>
      <Tab title="Express">
        Install the [x402 Express middleware package](https://www.npmjs.com/package/x402-express):

        ```bash  theme={null}
        npm install x402-express
        npm install @coinbase/x402 # for the mainnet facilitator
        ```
      </Tab>

      <Tab title="Next.js">
        Install the [x402 Next.js middleware package](https://www.npmjs.com/package/x402-next):

        ```bash  theme={null}
        npm install x402-next
        npm install @coinbase/x402 # for the mainnet facilitator
        ```
      </Tab>

      <Tab title="Hono">
        Install the [x402 Hono middleware package](https://www.npmjs.com/package/x402-hono):

        ```bash  theme={null}
        npm install x402-hono
        npm install @coinbase/x402 # for the mainnet facilitator
        ```
      </Tab>
    </Tabs>
  </Tab>

  <Tab title="Python">
    Install the [x402 Python package](https://pypi.org/project/x402/):

    ```bash  theme={null}
    pip install x402
    pip install cdp # for the mainnet facilitator
    ```
  </Tab>
</Tabs>

<Note>
  The mainnet facilitator packages (`@coinbase/x402` for Node.js, `cdp` for Python) are only needed for production. For testnet development, you can skip these. See [Running on Mainnet](#running-on-mainnet) for details.
</Note>

## 2. Add Payment Middleware

Integrate the payment middleware into your application. You will need to provide:

* The Facilitator URL or facilitator object. For testing, use `https://x402.org/facilitator` which works on Base Sepolia and Solana Devnet.
  * For mainnet setup, see [Running on Mainnet](#running-on-mainnet)
* The routes you want to protect
* Your receiving wallet address

<Tip>
  The examples below show testnet configuration. When you're ready to accept real payments, refer to [Running on Mainnet](#running-on-mainnet) for the simple changes needed.
</Tip>

<Tabs>
  <Tab title="Node.js">
    <Tabs>
      <Tab title="Express">
        Full example in the repo [here](https://github.com/coinbase/x402/tree/main/examples/typescript/servers/express).

        ```js  theme={null}
        import express from "express";
        import { paymentMiddleware, Network } from "x402-express";
        // import { facilitator } from "@coinbase/x402"; // For mainnet

        const app = express();

        app.use(paymentMiddleware(
          "0xYourAddress", // your receiving wallet address
          {  // Route configurations for protected endpoints
            "GET /weather": {
              // USDC amount in dollars
              price: "$0.001",
              network: "base-sepolia", // for mainnet, see Running on Mainnet section
              // Optional: Add metadata for better discovery in x402 Bazaar
              config: {
                description: "Get current weather data for any location",
                inputSchema: {
                  type: "object",
                  properties: {
                    location: { type: "string", description: "City name" }
                  }
                },
                outputSchema: {
                  type: "object",
                  properties: {
                    weather: { type: "string" },
                    temperature: { type: "number" }
                  }
                }
              }
            },
          },
          {
            url: "https://x402.org/facilitator", // for testnet
          }
        ));

        // Implement your route
        app.get("/weather", (req, res) => {
          res.send({
            report: {
              weather: "sunny",
              temperature: 70,
            },
          });
        });

        app.listen(4021, () => {
          console.log(`Server listening at http://localhost:4021`);
        });
        ```
      </Tab>

      <Tab title="Next.js">
        Full example in the repo [here](https://github.com/coinbase/x402/tree/main/examples/typescript/fullstack/next).

        ```js  theme={null}
        import { paymentMiddleware, Network } from 'x402-next';
        // import { facilitator } from "@coinbase/x402"; // For mainnet

        // Configure the payment middleware
        export const middleware = paymentMiddleware(
          "0xYourAddress", // your receiving wallet address
          {  // Route configurations for protected endpoints
            '/protected': {
              price: '$0.01',
              network: "base-sepolia", // for mainnet, see Running on Mainnet section
              config: {
                description: 'Access to protected content',
                // Optional: Add schemas for better discovery
                inputSchema: {
                  type: "object",
                  properties: {}
                },
                outputSchema: {
                  type: "object",
                  properties: {
                    content: { type: "string" }
                  }
                }
              }
            },
          },
          {
            url: "https://x402.org/facilitator", // for testnet
          }
        );

        // Configure which paths the middleware should run on
        export const config = {
          matcher: [
            '/protected/:path*',
          ]
        };
        ```
      </Tab>

      <Tab title="Hono">
        Full example in the repo [here](https://github.com/coinbase/x402/tree/main/examples/typescript/servers/hono).

        ```js  theme={null}
        import { Hono } from "hono";
        import { serve } from "@hono/node-server";
        import { paymentMiddleware, Network } from "x402-hono";
        // import { facilitator } from "@coinbase/x402"; // For mainnet

        const app = new Hono();

        // Configure the payment middleware
        app.use(paymentMiddleware(
          "0xYourAddress", // your receiving wallet address
          {  // Route configurations for protected endpoints
            "/protected-route": {
              price: "$0.10",
              network: "base-sepolia", // for mainnet, see Running on Mainnet section
              config: {
                description: "Access to premium content",
              }
            }
          },
          {
            url: "https://x402.org/facilitator", // for testnet
          }
        ));

        // Implement your route
        app.get("/protected-route", (c) => {
          return c.json({ message: "This content is behind a paywall" });
        });

        serve({
          fetch: app.fetch,
          port: 3000
        });
        ```
      </Tab>
    </Tabs>
  </Tab>

  <Tab title="Python">
    <Tabs>
      <Tab title="FastAPI">
        Full example in the repo [here](https://github.com/coinbase/x402/tree/main/examples/python/servers/fastapi).

        ```python  theme={null}
        import os
        from typing import Any, Dict
        from dotenv import load_dotenv
        from fastapi import FastAPI
        from x402.fastapi.middleware import require_payment
        from x402.types import EIP712Domain, TokenAmount, TokenAsset

        # Load environment variables
        load_dotenv()

        app = FastAPI()

        # Apply payment middleware to specific routes
        app.middleware("http")(
            require_payment(
                path="/weather",
                price="$0.001",
                pay_to_address="0xYourAddress",
                network_id="base-sepolia", # for mainnet, see Running on Mainnet section
                # Optional: Add metadata for better discovery in x402 Bazaar
                description="Get current weather data for any location",
                input_schema={
                    "type": "object",
                    "properties": {
                        "location": {"type": "string", "description": "City name"}
                    }
                },
                output_schema={
                    "type": "object",
                    "properties": {
                        "weather": {"type": "string"},
                        "temperature": {"type": "number"}
                    }
                }
            )
        )

        @app.get("/weather")
        async def get_weather() -> Dict[str, Any]:
            return {
                "report": {
                    "weather": "sunny",
                    "temperature": 70,
                }
            }
        ```
      </Tab>

      <Tab title="Flask">
        Full example in the repo [here](https://github.com/coinbase/x402/tree/main/examples/python/servers/flask).

        ```python  theme={null}
        import os
        from flask import Flask, jsonify
        from dotenv import load_dotenv
        from x402.flask.middleware import PaymentMiddleware
        from x402.types import EIP712Domain, TokenAmount, TokenAsset

        # Load environment variables
        load_dotenv()

        app = Flask(__name__)

        # Initialize payment middleware
        payment_middleware = PaymentMiddleware(app)

        # Apply payment middleware to specific routes
        payment_middleware.add(
            path="/weather",
            price="$0.001",
            pay_to_address="0xYourAddress",
            network="base-sepolia", # for mainnet, see Running on Mainnet section
            # Optional: Add metadata for better discovery in x402 Bazaar
            description="Get current weather data for any location",
            input_schema={
                "type": "object",
                "properties": {
                    "location": {"type": "string", "description": "City name"}
                }
            },
            output_schema={
                "type": "object",
                "properties": {
                    "weather": {"type": "string"},
                    "temperature": {"type": "number"}
                }
            }
        )

        @app.route("/weather")
        def get_weather():
            return jsonify({
                "report": {
                    "weather": "sunny",
                    "temperature": 70,
                }
            })
        ```
      </Tab>
    </Tabs>
  </Tab>
</Tabs>

<Note>
  Ready to accept real payments? See [Running on Mainnet](#running-on-mainnet) for production setup.
</Note>

**Payment Middleware Configuration Interface:**

```typescript  theme={null}
interface PaymentMiddlewareConfig {
  description?: string;               // Description of the payment
  mimeType?: string;                  // MIME type of the resource
  maxTimeoutSeconds?: number;         // Maximum time for payment (default: 60)
  outputSchema?: Record;              // JSON schema for the response
  customPaywallHtml?: string;         // Custom HTML for the paywall
  resource?: string;                  // Resource URL (defaults to request URL)
}
```

When a request is made to these routes without payment, your server will respond with the HTTP 402 Payment Required code and payment instructions.

## 3. Test Your Integration

To verify:

1. Make a request to your endpoint (e.g., `curl http://localhost:3000/your-endpoint`).
2. The server responds with a 402 Payment Required, including payment instructions in the body.
3. Complete the payment using a compatible client, wallet, or automated agent. This typically involves signing a payment payload, which is handled by the client SDK detailed in the [Quickstart for Buyers](/x402/quickstart-for-buyers).
4. Retry the request, this time including the `X-PAYMENT` header containing the cryptographic proof of payment (payment payload).
5. The server verifies the payment via the facilitator and, if valid, returns your actual API response (e.g., `{ "data": "Your paid API response." }`).

## 4. Enhance Discovery with Metadata (Recommended)

When using the CDP facilitator, your endpoints are **automatically listed** in the [x402 Bazaar](/x402/bazaar), our discovery layer that helps buyers and AI agents find services. To improve your visibility and help users understand your API:

<Tip>
  **Include descriptive metadata** in your middleware configuration:

  * **`description`**: Clear explanation of what your endpoint does
  * **`inputSchema`**: JSON schema describing required parameters
  * **`outputSchema`**: JSON schema of your response format

  This metadata helps:

  * AI agents automatically understand how to use your API
  * Developers quickly find services that meet their needs
  * Improve your ranking in discovery results
</Tip>

Example with full metadata:

```javascript  theme={null}
{
  price: "$0.001",
  network: "base",
  config: {
    description: "Get real-time weather data including temperature, conditions, and humidity",
    inputSchema: {
      type: "object",
      properties: {
        location: {
          type: "string",
          description: "City name or coordinates (e.g., 'San Francisco' or '37.7749,-122.4194')"
        },
        units: {
          type: "string",
          enum: ["celsius", "fahrenheit"],
          default: "fahrenheit"
        }
      },
      required: ["location"]
    },
    outputSchema: {
      type: "object",
      properties: {
        temperature: { type: "number", description: "Current temperature" },
        conditions: { type: "string", description: "Weather conditions (sunny, cloudy, rainy, etc.)" },
        humidity: { type: "number", description: "Humidity percentage" }
      }
    }
  }
}
```

Learn more about the discovery layer in the [x402 Bazaar documentation](/x402/bazaar).

## 5. Error Handling

* If you run into trouble, check out the examples in the [repo](https://github.com/coinbase/x402/tree/main/examples) for more context and full code.
* `npm install` the dependencies in each example

## Running on Mainnet

Once you've tested your integration on testnet, you're ready to accept real payments on mainnet. Here's what you need to do:

<Frame>
  <iframe width="560" height="315" src="https://www.youtube.com/embed/Zc_wBlDY2Zc" title="Running x402 on Mainnet" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen className="rounded-lg w-full" />
</Frame>

### 1. Set up CDP API Keys

To use the mainnet facilitator, you'll need a Coinbase Developer Platform account:

1. Sign up at [cdp.coinbase.com](https://cdp.coinbase.com)
2. Create a new project
3. Generate API credentials
4. Set the following environment variables:
   ```bash  theme={null}
   CDP_API_KEY_ID=your-api-key-id
   CDP_API_KEY_SECRET=your-api-key-secret
   ```

### 2. Update Your Code

Replace the testnet configuration with mainnet settings:

<Tabs>
  <Tab title="Node.js">
    ```js  theme={null}
    // Change your imports
    import { facilitator } from "@coinbase/x402";

    // Update the middleware configuration
    app.use(paymentMiddleware(
      "0xYourAddress",
      {
        "GET /weather": {
          price: "$0.001",
          network: "base",
        },
      },
      facilitator // this was previously { url: "https://x402.org/facilitator" }
    ));


    // or for Next.js
    export const middleware = paymentMiddleware(
      "0xYourAddress",
      {
        "GET /weather": {
          price: "$0.001",
          network: "base",
        },
      },
      facilitator // this was previously { url: "https://x402.org/facilitator" }
    ));
    ```
  </Tab>

  <Tab title="Python">
    ```python  theme={null}
    from cdp.x402 import create_facilitator_config

    facilitator_config = create_facilitator_config(
        api_key_id=CDP_API_KEY_ID,
        api_key_secret=CDP_API_KEY_SECRET,
    )

    # Update the middleware configuration (FastAPI)
    app.middleware("http")(
        require_payment(
            path="/weather",
            price="$0.001",
            pay_to_address="0xYourAddress",
            network_id="base", # Changed from "base-sepolia"
            facilitator_config=facilitator_config,
        )
    )

    # Or for Flask:
    payment_middleware.add(
        path="/weather",
        price="$0.001",
        pay_to_address="0xYourAddress",
        network="base", # Changed from "base-sepolia"
        facilitator_config=facilitator_config,
    )
    ```
  </Tab>
</Tabs>

### 3. Update Your Wallet

Make sure your receiving wallet address (`0xYourAddress`) is a real mainnet address where you want to receive USDC payments.

### 4. Test with Real Payments

Before going live:

1. Test with small amounts first
2. Verify payments are arriving in your wallet
3. Monitor the facilitator for any issues

<Warning>
  Mainnet transactions involve real money. Always test thoroughly on testnet first and start with small amounts on mainnet.
</Warning>

## Next Steps

* Looking for something more advanced? Check out the [Advanced Example](https://github.com/coinbase/x402/tree/main/examples/typescript/servers/advanced)
* Get started as a [buyer](/x402/quickstart-for-buyers)

For questions or support, join our [Discord](https://discord.gg/invite/cdp).

## Summary

This quickstart covered:

* Installing the x402 SDK and relevant middleware
* Adding payment middleware to your API and configuring it
* Testing your integration

Your API is now ready to accept crypto payments through x402.
